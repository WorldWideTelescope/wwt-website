trigger:
- master
- staging

pr:
- master
- staging

variables:
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'
  - name: dockerTag
    ${{ if eq( variables['Build.SourceBranchName'], 'master' ) }}:
      value: 'latest'
    ${{ if ne( variables['Build.SourceBranchName'], 'master' ) }}:
      value: ${{ variables['Build.SourceBranchName'] }}

stages:
- stage: Build
  jobs:
    - job: BuildCoreData
      displayName: 'Core Data WebApp'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          useGlobalJson: true

      - task: DotNetCoreCLI@2
        displayName: 'Install .NET Aspire'
        inputs:
          command: custom
          custom: 'workload '
          arguments: 'install aspire --source https://api.nuget.org/v3/index.json'

      - task: DotNetCoreCLI@2
        displayName: 'Install GitVersion'
        inputs:
          command: 'custom'
          custom: 'tool'
          arguments: 'install --global GitVersion.Tool --version 6.0.2'

      - task: DotNetCoreCLI@2
        displayName: 'Update Version'
        inputs:
          command: 'custom'
          custom: 'gitversion'
          arguments: '/output buildserver /nofetch'

      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: 'build'
          projects: 'wwt-core-data.sln'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: 'test'
          projects: 'wwt-core-data.sln'
          arguments: '--configuration $(buildConfiguration)'

      - bash: |
          dotnet publish ./src/WWT.Web/WWT.Web.csproj --configuration $(buildConfiguration) --no-build /t:PublishContainer -p "ContainerImageTags=${{ variables.dockerTag }}" -p ContainerArchiveOutputPath=$(build.artifactStagingDirectory)/dockerImage/core-data.tar.gz
        displayName: Build docker image

      - publish: $(build.artifactStagingDirectory)/dockerImage
        artifact: dockerImage
        displayName: Publish docker image

- stage: Deploy
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:

    # This job deploys the new Docker image to Docker Hub under the `latest`
    # tag, which will then trigger an update of the "stage" deployment slot of
    # the Linux core data app service. To bring the new image into production,
    # the stage and main slots should be "swapped" in the Azure UI, after
    # warming up the new app and doing any final testing.

    - job: DockerImage
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: none
      - download: current
        artifact: dockerImage
      - bash: |
          docker load -i $(Pipeline.Workspace)/dockerImage/core-data.tar.gz
        displayName: Load image from artifacts
      - task: Docker@2
        displayName: Push image
        inputs:
          containerRegistry: 'worldwidetelescope@DockerHub'
          repository: 'aasworldwidetelescope/core-data'
          command: 'push'
          tags: |
            ${{ variables.dockerTag }}
